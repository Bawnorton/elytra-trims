plugins {
    id "maven-publish"
    id "fabric-loom" version "1.2-SNAPSHOT" apply false

    // https://github.com/Juuxel/LoomQuiltflower
//    id "io.github.juuxel.loom-quiltflower" version "1.8.0" apply false

    // https://github.com/ReplayMod/preprocessor
    // https://github.com/Fallen-Breath/preprocessor
    id "com.replaymod.preprocess" version "e1050f4d72"

    // https://github.com/Fallen-Breath/yamlang
    id "me.fallenbreath.yamlang" version "1.3.0" apply false

    id "com.modrinth.minotaur" version "2.+" apply false
    id "net.darkhax.curseforgegradle" version "1.1.+" apply false
    id "com.github.breadmoirai.github-release" version "2.4.+" apply false
    id "co.uzzu.dotenv.gradle" version "2.0.0"
}

preprocess {
    def mc19 = createNode("1.19.4", 1_19_04, "yarn")
    def mc20 = createNode("1.20", 1_20_00, "yarn")

    mc20.link(mc19, file("versions/mapping-1.20-1.19.4.txt"))
}

tasks.register("buildAndGather") {
    group("build")
    subprojects {
        dependsOn project.name + ":build"
    }
    doFirst {
        println "Gathering builds"
        copy {
            subprojects {
                def libDir = project.projectDir.toPath().resolve("build/libs")
                from(libDir) {
                    include "*.jar"
                    exclude "*-dev.jar", "*-sources.jar"
                }
                into "build/libs/"
                duplicatesStrategy DuplicatesStrategy.INCLUDE
            }
        }
    }
}

tasks.register("cleanPreprocessSources") {
    doFirst {
        subprojects {
            def path = project.projectDir.toPath().resolve("build/preprocessed")
            path.toFile().deleteDir()

            def resPath = project.projectDir.toPath().resolve("build/resources")
            resPath.toFile().deleteDir()
        }
    }
}
