plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

//loom {
//    forge {
//        mixinConfig "examplemod-common.mixins.json"
//        mixinConfig "examplemod.mixins.json"
//    }
//}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${project.deps_minecraft}-${project.deps_forge}"
//    modApi "dev.architectury:architectury-forge:${project.deps_arch}"

    common(project(path: ":extensions:common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":extensions:common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":extensions:common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = project.mod_id + "-" + project.mod_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

publishMods {
    file = remapJar.archiveFile
    displayName = "${project.mod_name} Forge ${project.mod_version}"
    version = project.mod_version.toString()
    changelog = project.parent.file("CHANGELOG.md").text
    type = STABLE
    modLoaders.add("forge")

    dryRun = providers.environmentVariable("MODRINTH_TOKEN").getOrNull() == null || providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null

    modrinth {
        projectId = project.publish_modrinth.toString()
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersionRange {
            start = project.mod_minver
            end = project.mod_maxver
        }
        requires {
            slug = "elytra-trims"
        }
    }
    curseforge {
        projectId = project.publish_curseforge.toString()
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersionRange {
            start = project.mod_minver
            end = project.mod_maxver
        }
        requires {
            slug = "elytra-trims"
        }
    }
}
