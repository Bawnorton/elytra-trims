import net.darkhax.curseforgegradle.TaskPublishCurseForge

//file:noinspection GroovyAssignabilityCheck
apply plugin: "maven-publish"
apply plugin: "fabric-loom"
//apply plugin: "io.github.juuxel.loom-quiltflower"
apply plugin: "com.replaymod.preprocess"
apply plugin: "me.fallenbreath.yamlang"
apply plugin: "com.modrinth.minotaur"
apply plugin: "com.github.breadmoirai.github-release"
apply plugin: "net.darkhax.curseforgegradle"

loom {
    splitEnvironmentSourceSets()

    mods {
        "minecraft" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

}

int mcVersion = 1
preprocess {
    mcVersion = vars.get()["MC"] as int
    tabIndentation = false
}

repositories {
    maven { url "https://jitpack.io" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://maven.kikugie.dev/releases" }

}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude group: "net.fabricmc", module: "fabric-loader"
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
    include api(annotationProcessor("com.github.LlamaLad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}"))
    include api(clientAnnotationProcessor("com.github.LlamaLad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}"))
//    include modImplementation("com.github.Fallen-Breath:conditional-mixin:v${project.conditional_mixin_version}")

    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}"
    modImplementation "dev.kikugie.command-config:${project.cmd_config_version}"
}

loom {
    accessWidenerPath = file("src/main/resources/elytratrims.accesswidener")

    runConfigs.all {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        runDir "../../run"
        vmArgs "-Dmixin.debug.export=true"
    }
}

remapJar {
    remapperIsolation = true
}

group = project.maven_group
archivesBaseName = project.archives_base_name + "-" + project.mod_version + "+" + project.game_versions

processResources {
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "id"                  : project.mod_id,
                "name"                : project.mod_name,
                "version"             : project.mod_version,
                "minecraft_dependency": project.minecraft_dependency,
        ]
        expand valueMap
    }
}

// https://github.com/Fallen-Breath/yamlang
yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = "assets/elytratrims/lang"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    withSourcesJar()
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

def debug = true

tasks.register("release") {
    group "publishing"
    dependsOn "modrinth"
    dependsOn "githubRelease"
    dependsOn "curseforge"
    if (!debug) dependsOn "publish"
}

modrinth {
    token = env.fetchOrNull("MODRINTH_TOKEN")
    projectId = "elytra-trims"
    versionName = "Elytra Trims " + project.mod_version + " for " + project.game_versions
    versionNumber = project.mod_version
    versionType = "release"
    uploadFile = remapJar
    additionalFiles = [sourcesJar]
    gameVersions = project.modrinth_versions.split(" ").toList()
    loaders = ["fabric", "quilt"]
    dependencies {
        required.project "fabric-api"
        optional.project "cloth-config"
        optional.project "yacl"
        optional.project "command-config"
    }
    syncBodyFrom = rootProject.file("README.md").text
    changelog = rootProject.file("CHANGELOG.md").text
    failSilently = true
    debugMode = debug
}

githubRelease {
    token = env.fetch("GITHUB_TOKEN", "")
    owner = "kikugie"
    repo = "elytra-trims"
    tagName = "v${project.mod_version}"
    targetCommitish = "multi"
    releaseName = project.mod_name + " " + project.mod_version
    body = rootProject.file("CHANGELOG.md").text
    draft = mcVersion >= 12000
    releaseAssets = [remapJar, sourcesJar]
    allowUploadToExisting = true
    overwrite = false
    dryRun = debug
}

tasks.register("curseforge", TaskPublishCurseForge) {
    group "publishing"
    disableVersionDetection()
    apiToken = env.fetch("CURSEFORGE_TOKEN", "")

    def mainFile = upload(project.project_id, remapJar)
    mainFile.releaseType = "release"
    mainFile.displayName = "Elytra Trims " + project.mod_version + " for " + project.game_versions
    mainFile.changelog = rootProject.file("CHANGELOG.md").text
    mainFile.changelogType = "markdown"
    mainFile.addRequirement "fabric-api"
    mainFile.addOptional "yacl", "cloth-config"
    mainFile.addModLoader "fabric", "quilt"
    for (String version : project.modrinth_versions.split(" ")) {
        mainFile.addGameVersion version
    }
    debugMode = debug
}

publishing {
    repositories {
        maven {
            name = "kikugieMaven"
            url = "https://maven.kikugie.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = project.maven_group + "." + project.archives_base_name
            artifactId = project.mod_version
            version = project.game_versions

            from components.java
        }
    }
}
